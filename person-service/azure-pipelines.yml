trigger:
  branches:
    include:
    - master
  paths:
    include:
    - person-service/*

variables:
  solution: 'person-service/person-service.csproj'
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  sonarProjectKey: 'person-service'
  sonarOrganization: 'piomin'
  # OpenShift variables
  ocpClusterUrl: '$(OCP_CLUSTER_URL)'
  ocpToken: '$(OCP_TOKEN)'
  ocpNamespace: '$(OCP_NAMESPACE)'
  imageStream: 'person-service'

pool:
  name: Azure Pipelines
#  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
  - job: BuildAndTest
    steps:
#    - checkout: self

    - task: UseDotNet@2
      inputs:
        version: '9.x'
        includePreviewVersions: true

    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: '6.x'
        checkLatest: true

    - task: CmdLine@2
      inputs:
        script: |
          ls -la
          pwd

    - task: PowerShell@2
      displayName: 'Get Project Version'
      inputs:
        targetType: 'inline'
        script: |
          $xml = [Xml] (Get-Content $(solution))
          $version = $xml.Project.PropertyGroup.Version
          Write-Host "##vso[task.setvariable variable=projectVersion]$version"
          Write-Host "Project version: $version"

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        feedsToUse: 'select'

    - task: SonarCloudPrepare@3
      inputs:
        SonarCloud: 'SonarCloud'
        organization: '$(sonarOrganization)'
        scannerMode: 'dotnet'
        projectKey: '$(sonarProjectKey)'
        projectName: 'Person Service'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: 'dotnet test person-service.tests/person-service.tests.csproj'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --logger trx -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'
        publishTestResults: true

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage'
      inputs:
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        failIfCoverageEmpty: false

    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Analysis'

    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Results'
      inputs:
        pollingTimeoutSec: '300'

    - task: NuGetCommand@2
      displayName: 'NuGet pack'
      inputs:
        command: 'pack'
        packagesToPack: '$(solution)'
        configuration: '$(buildConfiguration)'
        packDestination: '$(Build.ArtifactStagingDirectory)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'projectVersion'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'person-service'
        publishLocation: 'Container'

- stage: BuildImage
  dependsOn: Build
  condition: succeeded()
  variables:
    imageTag: '$(projectVersion)'
  jobs:
  - job: BuildOnOpenShift
    steps:
    - task: oc-cmd@3
      displayName: 'Login to OpenShift'
      inputs:
        cmd: 'login'
#        serverUrl: '$(ocpClusterUrl)'
#        token: '$(ocpToken)'
        connectionType: 'OpenShift Connection Service'
        openshiftService: 'piomin-ocp'
        version: '4.17'

    - task: oc-cmd@3
      displayName: 'Switch to Project'
      inputs:
        cmd: 'project $(ocpNamespace)'

    - task: oc-cmd@3
      displayName: 'Create/Update BuildConfig'
      inputs:
        cmd: |
          oc process -f - | oc apply -f - <<EOF
          apiVersion: template.openshift.io/v1
          kind: Template
          metadata:
            name: person-service-build
          objects:
          - apiVersion: build.openshift.io/v1
            kind: BuildConfig
            metadata:
              name: person-service
            spec:
              output:
                to:
                  kind: ImageStreamTag
                  name: ${IMAGE_STREAM}:${IMAGE_TAG}
              source:
                binary: {}
                type: Binary
              strategy:
                sourceStrategy:
                  from:
                    kind: ImageStreamTag
                    name: 'dotnet:9.0-ubi8'
                    namespace: openshift
                  env:
                  - name: DOTNET_STARTUP_PROJECT
                    value: person-service/person-service.csproj
                  - name: DOTNET_CONFIGURATION
                    value: Release
                  - name: DOTNET_RESTORE_SOURCES
                    value: https://api.nuget.org/v3/index.json
                type: Source
          - apiVersion: image.openshift.io/v1
            kind: ImageStream
            metadata:
              name: ${IMAGE_STREAM}
            spec:
              lookupPolicy:
                local: true
          parameters:
          - name: IMAGE_STREAM
            value: $(imageStream)
          - name: IMAGE_TAG
            value: $(imageTag)
          EOF

    - task: oc-cmd@3
      displayName: 'Start Binary Build'
      inputs:
        cmd: |
          oc start-build $(imageStream) \
            --from-dir=$(Build.ArtifactStagingDirectory) \
            --follow

- stage: DeployOnTest
  dependsOn: BuildImage
  condition: succeeded()
  variables:
    imageTag: '$(projectVersion)'
  jobs:
  - job: CommitNewTag
    steps:
      - checkout: git://gitops
        persistCredentials: true
        fetchDepth: 0
      - task: CmdLine@2
        inputs:
          script: |
            git config --global user.email "piotr.minkowski@gmail.com"
            git config --global user.name "Piotr Minkowski"
            cd gitops
            git checkout main
            yq e '.image.tag = "$(imageTag)"' -i apps/person-service/test/values.yaml
            cat apps/person-service/test/values.yaml
            git add apps/person-service/test/values.yaml
            git commit -m "$(imageTag)"
            git remote -v
            git push https://$(System.AccessToken)@dev.azure.com/pminkows/pminkows/_git/gitops main
        displayName: List catalog
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- stage: DeployOnProd
  dependsOn: DeployOnTest
  condition: succeeded()
  variables:
    imageTag: '$(projectVersion)'
  jobs:
    - deployment: Deployment_Staging
      environment:
        name: staging
      strategy:
        runOnce:
          deploy:
            steps:
              - task: CmdLine@2
                inputs:
                  script: |
                    git config --global user.email "piotr.minkowski@gmail.com"
                    git config --global user.name "Piotr Minkowski"
                    cd gitops
                    git checkout main
                    yq e '.image.tag = "$(imageTag)"' -i apps/person-service/prod/values.yaml
                    cat apps/person-service/prod/values.yaml
                    git add apps/person-service/prod/values.yaml
                    git commit -m "$(imageTag)"
                    git remote -v
                    git push https://$(System.AccessToken)@dev.azure.com/pminkows/pminkows/_git/gitops main
                displayName: List catalog
                env:
                  SYSTEM_ACCESSTOKEN: $(System.AccessToken)